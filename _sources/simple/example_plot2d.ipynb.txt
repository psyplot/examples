{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2D plots\n",
    "Demonstration of the 2D plot capabilities\n",
    "\n",
    "The ``plot2d`` plot method make plots of 2-dimensional scalar data\n",
    "using matplotlibs ``pcolormesh`` or the ``contourf`` functions.\n",
    "\n",
    "Note that this method is extended by the [mapplot](http://psyplot.readthedocs.io/projects/psy-maps/en/latest/examples/example_mapplotters.html) plot method of the [psy-maps](http://psyplot.readthedocs.io/projects/psy-maps/en/latest/index.html) plugin for visualization on the projected globe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/psommer/miniconda3/lib/python3.6/site-packages/IPython/html.py:14: ShimWarning: The `IPython.html` package has been deprecated since IPython 4.0. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.\n",
      "  \"`IPython.html.widgets` has moved to `ipywidgets`.\", ShimWarning)\n"
     ]
    }
   ],
   "source": [
    "import psyplot.project as psy\n",
    "import xarray as xr\n",
    "%matplotlib inline\n",
    "%config InlineBackend.close_figures = False\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we create some sample data in the form of a 2D parabola"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = np.linspace(-1, 1.)\n",
    "y = np.linspace(-1, 1.)\n",
    "x2d, y2d = np.meshgrid(x, y)\n",
    "z = - x2d**2 - y2d**2\n",
    "ds = xr.Dataset(\n",
    "    {'z': xr.Variable(('x', 'y'), z)},\n",
    "    {'x': xr.Variable(('x', ), x), 'y': xr.Variable(('y', ), y)})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a simple 2D plot of a scalar field, we can use the\n",
    "[plot2d](http://psyplot.readthedocs.io/projects/psy-simple/en/latest/generated/psyplot.project.plot.plot2d.html#psyplot.project.plot.plot2d) plot method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "nbsphinx-thumbnail": {
     "tooltip": "Visualize simple 2D scalar fields"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11208cac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = psy.plot.plot2d(ds, cmap='Reds', name='z')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ``plot`` formatoption controls, how the plot is made. The default is a \n",
    "[pcolormesh](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.pcolormesh) \n",
    "plot, but we can also make a \n",
    "[filled contour](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.contourf) \n",
    "plot. The levels of the contour plot are determined through the ``levels`` formatoption."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nXkDr3IU00wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11208cac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.update(plot='contourf', levels=5)\n",
    "p.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ``plot2d`` method has several formatoptions controlling the color coding of your plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-------------+-------------+-------------+\n",
      "| levels      | miss_color  | cmap        | bounds      |\n",
      "+-------------+-------------+-------------+-------------+\n",
      "| extend      | cbar        | cbarspacing | cticksize   |\n",
      "+-------------+-------------+-------------+-------------+\n",
      "| ctickweight | ctickprops  |             |             |\n",
      "+-------------+-------------+-------------+-------------+\n"
     ]
    }
   ],
   "source": [
    "p.keys('colors')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most important ones are\n",
    "\n",
    "- ``cbar``: To specify the location of the colorbar\n",
    "- ``bounds``: To specify the boundaries for the color coding, i.e.\n",
    "  the categories which data range belongs to which color\n",
    "- ``cmap``: To specify the colormap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "psy.close('all')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
